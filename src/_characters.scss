// safe-characters
// --------------------------
/// Convert special characters in strings to their simple equivalent
/// to filter with characters.
/// @access public
/// @group Character utilities
/// @type String
/// @output String
/// @parameter String

@function safe-characters($str) {
	// prettier-ignore
	$needles: ('À', 'Á', 'Â', 'Ã', 'Ä', 'Å', 'Æ', 'Ç', 'È', 'É', 'Ê', 'Ë', 'Ì', 'Í', 'Î', 'Ï', 'Ð', 'Ñ', 'Ò', 'Ó', 'Ô', 'Õ', 'Ö', 'Ø', 'Ù', 'Ú', 'Û', 'Ü', 'Ý', 'ß', 'à', 'á', 'â', 'ã', 'ä', 'å', 'æ', 'ç', 'è', 'é', 'ê', 'ë', 'ì', 'í', 'î', 'ï', 'ñ', 'ò', 'ó', 'ô', 'õ', 'ö', 'ø', 'ù', 'ú', 'û', 'ü', 'ý', 'ÿ', 'Ā', 'ā', 'Ă', 'ă', 'Ą', 'ą', 'Ć', 'ć', 'Ĉ', 'ĉ', 'Ċ', 'ċ', 'Č', 'č', 'Ď', 'ď', 'Đ', 'đ', 'Ē', 'ē', 'Ĕ', 'ĕ', 'Ė', 'ė', 'Ę', 'ę', 'Ě', 'ě', 'Ĝ', 'ĝ', 'Ğ', 'ğ', 'Ġ', 'ġ', 'Ģ', 'ģ', 'Ĥ', 'ĥ', 'Ħ', 'ħ', 'Ĩ', 'ĩ', 'Ī', 'ī', 'Ĭ', 'ĭ', 'Į', 'į', 'İ', 'ı', 'Ĳ', 'ĳ', 'Ĵ', 'ĵ', 'Ķ', 'ķ', 'Ĺ', 'ĺ', 'Ļ', 'ļ', 'Ľ', 'ľ', 'Ŀ', 'ŀ', 'Ł', 'ł', 'Ń', 'ń', 'Ņ', 'ņ', 'Ň', 'ň', 'ŉ', 'Ō', 'ō', 'Ŏ', 'ŏ', 'Ő', 'ő', 'Œ', 'œ', 'Ŕ', 'ŕ', 'Ŗ', 'ŗ', 'Ř', 'ř', 'Ś', 'ś', 'Ŝ', 'ŝ', 'Ş', 'ş', 'Š', 'š', 'Ţ', 'ţ', 'Ť', 'ť', 'Ŧ', 'ŧ', 'Ũ', 'ũ', 'Ū', 'ū', 'Ŭ', 'ŭ', 'Ů', 'ů', 'Ű', 'ű', 'Ų', 'ų', 'Ŵ', 'ŵ', 'Ŷ', 'ŷ', 'Ÿ', 'Ź', 'ź', 'Ż', 'ż', 'Ž', 'ž', 'ſ', 'ƒ', 'Ơ', 'ơ', 'Ư', 'ư', 'Ǎ', 'ǎ', 'Ǐ', 'ǐ', 'Ǒ', 'ǒ', 'Ǔ', 'ǔ', 'Ǖ', 'ǖ', 'Ǘ', 'ǘ', 'Ǚ', 'ǚ', 'Ǜ', 'ǜ', 'Ǻ', 'ǻ', 'Ǽ', 'ǽ', 'Ǿ', 'ǿ', 'Ά', 'ά', 'Έ', 'έ', 'Ό', 'ό', 'Ώ', 'ώ', 'Ί', 'ί', 'ϊ', 'ΐ', 'Ύ', 'ύ', 'ϋ', 'ΰ', 'Ή', 'ή');
	// prettier-ignore
	$replacers: ('A', 'A', 'A', 'A', 'A', 'A', 'AE', 'C', 'E', 'E', 'E', 'E', 'I', 'I', 'I', 'I', 'D', 'N', 'O', 'O', 'O', 'O', 'O', 'O', 'U', 'U', 'U', 'U', 'Y', 's', 'a', 'a', 'a', 'a', 'a', 'a', 'ae', 'c', 'e', 'e', 'e', 'e', 'i', 'i', 'i', 'i', 'n', 'o', 'o', 'o', 'o', 'o', 'o', 'u', 'u', 'u', 'u', 'y', 'y', 'A', 'a', 'A', 'a', 'A', 'a', 'C', 'c', 'C', 'c', 'C', 'c', 'C', 'c', 'D', 'd', 'D', 'd', 'E', 'e', 'E', 'e', 'E', 'e', 'E', 'e', 'E', 'e', 'G', 'g', 'G', 'g', 'G', 'g', 'G', 'g', 'H', 'h', 'H', 'h', 'I', 'i', 'I', 'i', 'I', 'i', 'I', 'i', 'I', 'i', 'IJ', 'ij', 'J', 'j', 'K', 'k', 'L', 'l', 'L', 'l', 'L', 'l', 'L', 'l', 'l', 'l', 'N', 'n', 'N', 'n', 'N', 'n', 'n', 'O', 'o', 'O', 'o', 'O', 'o', 'OE', 'oe', 'R', 'r', 'R', 'r', 'R', 'r', 'S', 's', 'S', 's', 'S', 's', 'S', 's', 'T', 't', 'T', 't', 'T', 't', 'U', 'u', 'U', 'u', 'U', 'u', 'U', 'u', 'U', 'u', 'U', 'u', 'W', 'w', 'Y', 'y', 'Y', 'Z', 'z', 'Z', 'z', 'Z', 'z', 's', 'f', 'O', 'o', 'U', 'u', 'A', 'a', 'I', 'i', 'O', 'o', 'U', 'u', 'U', 'u', 'U', 'u', 'U', 'u', 'U', 'u', 'A', 'a', 'AE', 'ae', 'O', 'o', 'Α', 'α', 'Ε', 'ε', 'Ο', 'ο', 'Ω', 'ω', 'Ι', 'ι', 'ι', 'ι', 'Y', 'υ', 'υ', 'υ', 'Η', 'η');
	@return str-replace($str, $needles, $replacers);
}
// Allowed-characters function
// --------------------------
/// Takes a few arguments an responsds with a list of letters which can be used by other functions
/// to filter with characters.
/// @access public
/// @group Character utilities
/// @type String
/// @output List
/// @parameter List

@function character-set($characters) {
	$new-characters: ();
	$return-default: true;
	$character-set: (
		'numbers': '01234556789',
		'lowercase': 'abcdefghijklmnopqrstuvwxyz',
		'uppercase': 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
	);
	@each $char in $characters {
		@if $char == 'a-Z' {
			$return-default: false;
			$new-characters: join(
				$new-characters,
				to-letter-list(map-get($character-set, 'lowercase'))
			);
			$new-characters: join(
				$new-characters,
				to-letter-list(map-get($character-set, 'uppercase'))
			);
		} @else if $char == 'a-z' {
			$return-default: false;
			$new-characters: join(
				$new-characters,
				to-letter-list(map-get($character-set, 'lowercase'))
			);
		} @else if $char == 'A-Z' {
			$return-default: false;
			$new-characters: join(
				$new-characters,
				to-letter-list(map-get($character-set, 'uppercase'))
			);
		} @else if $char == '0-9' {
			$return-default: false;
			$new-characters: join(
				$new-characters,
				to-letter-list(map-get($character-set, 'numbers'))
			);
		} @else if type-of($char) == 'string' {
			$new-characters: append($new-characters, $char);
		} @else if type-of($char) == 'list' {
			$new-characters: join($new-characters, $char);
		}
	}

	@return $new-characters;
}

// Allowed characters function
// --------------------------
/// Pass in the characters you want to allow and remove all others from a string
/// @access public
/// @group Character utilities
/// @type String
/// @output String
/// @parameter String

@function allowed-characters($str, $characters: ()) {
	@if type-of($characters) == 'string' {
		$characters: to-letter-list($characters);
	} @else if type-of($characters) == 'list' {
		$characters: character-set($characters);
	}
	$new-str: ();
	@for $i from 1 through str-length($str) {
		@if index($characters, str-slice($str, $i, $i)) != null {
			$new-str: append($new-str, str-slice($str, $i, $i));
		}
	}
	@return list-to-str($new-str);
}
